import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

import com.google.common.collect.Lists;


public class SparkStreaming {

	private static final Pattern TAB = Pattern.compile("\t");
	private static final Pattern NEWLINE = Pattern.compile("\n");
	  public static void main(String[] args) throws IOException {
	    if (args.length < 4) {
	      System.err.println("Usage: JavaNetworkWordCount <hostname> <port> <outHost> <outPort>");
	      System.exit(1);
	    }

//	    Socket smtpSocket = null;
//		DataOutputStream os = null;
//
//		try {
//			smtpSocket = new Socket("192.168.0.4", 9999);
//			os = new DataOutputStream(smtpSocket.getOutputStream());
//
//		} catch (UnknownHostException e) {
//			System.err.println("Don't know about host: hostname");
//		} catch (IOException e) {
//			System.err
//					.println("Couldn't get I/O for the connection to: hostname");
//		}
	    
	  //  StreamingExamples.setStreamingLogLevels();

	    // Create the context with a 1 second batch size
	    		
	    SparkConf sparkConf = new SparkConf().setAppName("SparkStreaming").setMaster("spark://192.168.0.1:7077");


	    JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(5));

	    // Create a JavaReceiverInputDStream on target ip:port and count the
	    // words in input stream of \n delimited text (eg. generated by 'nc')
	    // Note that no duplication in storage level only for running locally.
	    // Replication necessary in distributed scenario for fault tolerance.
	    
//	    JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
//	            args[0], Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
	    
	    JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
	            args[0], Integer.parseInt(args[1]));
	    JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
	      
	      public Iterable<String> call(String x) {
	    	  System.out.println(x);
	        return Lists.newArrayList(NEWLINE.split(x));
	      }
	    });
	   
//	    JavaDStream<String> file  = ssc.textFileStream("equinox-sanjose.20120119-netflow.txt");
//	    ssc.checkpoint(".");
//	    JavaDStream<String> words = file.flatMap(new FlatMapFunction<String, String>() {
//	      
//	      public Iterable<String> call(String x) {
//	    	  System.out.println(x);
//	        return Lists.newArrayList(NEWLINE.split(x));
//	      }
//	    });
	    
	    
	    
	    JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
	      new PairFunction<String, String, Integer>() {
	    	  
	        public Tuple2<String, Integer> call(String s) {
	        	System.out.println("INSIDE MAP: "+s);
	        	String [] pieces = s.split(" +");
	        	if(pieces.length>8){
	          return new Tuple2<String, Integer>(pieces[4]+pieces[6], Integer.valueOf(pieces[8]));
	        	}
	        	else{
	        		return new Tuple2<String, Integer>("incompleteBuffer", 1);
	    	        
	        	}
	        }
	      }).reduceByKey(new Function2<Integer, Integer, Integer>() {
	        
	        public Integer call(Integer i1, Integer i2) {
	        	System.out.println("INSIDE REDUCE: ");
	          return i1 + i2;
	        }
	      });

	    wordCounts.print();
	    
	    wordCounts.saveAsNewAPIHadoopFiles("result_", ".txt");
	    
	    
	    ssc.start();
	    ssc.awaitTermination();
	  }
	
	
}
