

import scala.Tuple2;
import com.google.common.collect.Lists;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import java.util.regex.Pattern;


/**
 * Hello world!
 *
 */
public class StreamingExample 
{
	 private static final Pattern SPACE = Pattern.compile(" ");

	  public static void main(String[] args) {
	    if (args.length < 2) {
	      System.err.println("Usage: JavaNetworkWordCount <hostname> <port>");
	      System.exit(1);
	    }

	  //  StreamingExamples.setStreamingLogLevels();

	    // Create the context with a 1 second batch size
	    		
	    SparkConf sparkConf = new SparkConf().setAppName("JavaNetworkWordCount").setMaster("spark://192.168.0.1:7077");

//	    SparkConf sparkConf = new SparkConf().setAppName("JavaNetworkWordCount").setMaster("local[2]");

	    
//	    		.setJars(new String[]{"sparkstreaming-0.0.1-SNAPSHOT-driver.jar",
//	    		"sparkstreaming-0.0.1-SNAPSHOT.jar ",
//	    		"sparkstreaming-0.0.1-SNAPSHOT-jar-with-dependencies.jar",
//	    		"sparkstreaming-0.0.1-SNAPSHOT-worker.jar"});
	    JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(5));

	    // Create a JavaReceiverInputDStream on target ip:port and count the
	    // words in input stream of \n delimited text (eg. generated by 'nc')
	    // Note that no duplication in storage level only for running locally.
	    // Replication necessary in distributed scenario for fault tolerance.
	    
//	    JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
//	            args[0], Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
	    
	    
//	    JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
//	      
//	      public Iterable<String> call(String x) {
//	    	  System.out.println(x);
//	        return Lists.newArrayList(SPACE.split(x));
//	      }
//	    });
	   
	    JavaDStream<String> words  = ssc.textFileStream("/home/hduser/spark_scratchPad/equinox-sanjose.20120119-netflow.txt");
	     
	    
	    JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
	      new PairFunction<String, String, Integer>() {
	        
	        public Tuple2<String, Integer> call(String s) {
	        	System.out.println("INSIDE MAP: "+s);
	          return new Tuple2<String, Integer>(s, 1);
	        }
	      }).reduceByKey(new Function2<Integer, Integer, Integer>() {
	        
	        public Integer call(Integer i1, Integer i2) {
	        	System.out.println("INSIDE REDUCE: ");
	          return i1 + i2;
	        }
	      });

	    wordCounts.print();
	    ssc.start();
	    ssc.awaitTermination();
	  }
}
