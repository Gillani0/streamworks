#########################################
#
# Running the code
#
#########################################

See graph_search/src/examples for sample code for:
--- Loading the graph with various kinds of datasets.
--- Running subgraph isomorphism on a static graph.
--- Running subgraph isomorphism on a dynamic graph.

Following are the key components of the library.

Graph:
graph_search/src/graph/graph.hpp implements the core heterogeneous
graph data structure. It is a templated data structure:
Graph<VertexData, EdgeData>
Where VertexData and EdgeData can be arbitrary data structures representing
data on every vertex and edge of the graph.
See graph_search/src/graph/vertex.hpp and 
    graph_search/src/graph/edge.hpp for details.

Every vertex and edge have a type, an integer id describing the "type".
As an example: we can model the DBLP network with two type of nodes:
author and papers.  Each node in the graph needs to specify its type by
mapping authors and papers to unique ids, say 0 and 1.
Edges in DBLP network represent relations such as "published", "co-authored" 
etc..  Similarly, each edge needs to use an integer to specify the relation
it represents.
Many vertices just have a label, so a Label structure is provided in 
vertex.hpp that simply includes a string object.
Similiarly, we provide a Timestamp structure in edge.hpp that just contains
a timestamp indicating when the relationship occurred.

The graph data structure can contain multi-edges, where each interaction 
between a node pair is distinguished by the timestamp.

To load a graph:
/* 
 * Provide a hint to how many nodes we expect.  Else we will be resizing the
 * graph continuously, which is expensive. 
 */
int alloc_vertex_count = 1000000;
Graph<Label, Timestamp>* dyn_graph = 
    new Graph<Label, Timestamp>(alloc_vertex_count);
dyn_graph->AllocateAdjacencyLists();

/*
 * Add vertices into the graph.
 * Vertex ids are zero based and compact. If there are N nodes in the graph,
 * ids should range from 0 to N-1.
 */
int u = 0; 
VertexProperty<Label> u_prop;
u_prop.type = 0;
Label vertex_label = "Jim Gray";
u_prop.vertex_data = vertex_label;
dyn_graph->AddVertex(u, u_prop);
u = 1;
u_prop.type = 1;
Label vertex_label = "One of his SIGMOD papers";
u_prop.vertex_data = vertex_label;
dyn_graph->AddVertex(u, u_prop);

/*
 * Add an edge.
 * Pass source node, target node and edge type to constructor.
 */
DirectedEdge<Timestamp> some_edge(0, 1, 0);
dyn_graph->AddEdge(some_edge);
delete dyn_graph;

USEFUL FUNCTIONS

- RemoveEdge 
Removes a directed edge from graph, used for "aging" the graph or maintain
a rolling window.

- RemoveEdgesBefore 
Calls RemoveEdge to prune all edges older than a given timestamp.

- NumVertices, NumEdges

- GetVertexProperty
Get the metadata associated with a node.

- Neighbors
Get the list of neighbors associated with a node.

- NeighborCount
Get the number of neighbors associated with a node.

- isNeighbor
Detect if two nodes have an edge between them.

########################################
#
# Subgraph isomorphism
#
########################################

See graph_search/src/search/subgraph_search.hpp
Create a data graph and a query graph.  

typedef typename Graph<Label, Timestamp> DynGraph
GraphQuery<DynGraph> query(data_grah, query_graph);

// d_array is a resizable/dynamic array.  
// Implemented in src/commons/utils.h
// MatchSet is defined in graph_search/src/graph/match.h
// This data structure contains the mapping between nodes and edges 
// across the query graph and data graph.

d_array<MatchSet* > results;
query.Execute(results);
for (uint64_t i = 0, N = results.len; i < N; i++) {
  results[i]->Print();
}

########################################
#
# Dynamic Graph Search
#
########################################

This section walks through the step-by-step process of executing
a query on the dynamic graph.

- Specify a query
The following is an example of a query graph.

v 0 ip deg>19
v 1 ip deg>19
v 2 ip deg>19
v 3 ip
e 0 1 TCP num_bytes>1024
e 1 2 TCP num_bytes>1024
e 2 3 TCP num_bytes>1024
q GROUPBY 0 DISTINCT_COUNT_GEQ 8000

The query file has two sections. A vertex description section and an
edge description section.

Each line in the vertex description section has the following format:
v <vertex_id> <vertex-type-as-string> <optional:constraints>
Each line in the edge description section has the following format:
e <src_id> <target_id> <edge-type-as-string> <optional:constraints>

- Load a query
To load a query graph from a file such as above, use the following:
ParseQuery is implemented in:
graph_search/src/streaming_search/query_parser.hpp

Graph<Label, Timestamp>* query_graph = ParseQuery(query_path,
    vertex_property_map, edge_property_map);

- Choose query type
Currently the library supports two type of queries.  Aggregation queries
and Graph Pattern matching queries.

Aggregation query: Fig. 1 shows an example aggregation query.  We are
interested to find when a specific graph pattern occurs with a common set
of vertices beyond a specific threshold.

Graph Pattern Matching query: The query in Fig. 1 without the GROUPBY clause
can be treated as graph pattern matching query. As a simple rule of thumb, 
most aggregation queries look for multiple occurrences of a 2-edge subgraph.
The graph pattern queries look for a much bigger graph. The search is 
performed by decomposing the complex query graph into a collection of 2-edge
queries using graph stream statistics.

Usually, the pattern matching queries look for more complex subgraphs than
what are specified as part of an aggregation query.

